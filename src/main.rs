// Adapted from https://github.com/esp-rs/std-training/intro/http-server

use anyhow::Result;
use core::str;
use embedded_svc::{http::Method, io::Write};
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::{
        delay::Delay,
        io::EspIOError,
        prelude::*,
        spi::{config::DriverConfig, SpiDriver},
    },
    http::server::{Configuration, EspHttpServer},
};
use esp_max31865::{Max31865, PowerFilter, Wires};
use std::{
    sync::{Arc, RwLock},
    thread,
    time::Duration,
};

use wifi::wifi;

mod wifi;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    esp_idf_svc::sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;
    let pins = peripherals.pins;

    let spi = peripherals.spi2;
    let sclk = pins.gpio6;
    let sdo = pins.gpio2;
    let sdi = pins.gpio7;
    let config = DriverConfig::new();
    let driver = SpiDriver::new(spi, sclk, sdo, Some(sdi), &config).unwrap();

    let delay = Delay::new_default();
    let cs = pins.gpio10;
    let rtd_nominal = 1000.; // if PT100: 100, if PT1000: 1000
    let ref_resistance = 431.; // ref resistor on board
    let mut temp_sensor =
        Max31865::new(&driver, &delay, cs, rtd_nominal, ref_resistance)
            .unwrap();

    temp_sensor
        .set_config(
            Some(Wires::Three),
            Some(PowerFilter::FiftyHertz),
            Some(true),  //??
            Some(true),  //??
            Some(false), //??
        )
        .unwrap();

    let mut temp_sensor = MockSensor::new();

    let temp_value = Arc::new(RwLock::new(0.0));
    let temp_value_clone = temp_value.clone();

    // Set the HTTP server
    let mut server = EspHttpServer::new(&Configuration::default())?;

    // http://<sta ip>/temperature handler
    server.fn_handler(
        "/",
        Method::Get,
        move |request| -> core::result::Result<(), EspIOError> {
            let temp_val = *temp_value_clone.read().unwrap();
            let html = webpage();
            let mut response = request.into_ok_response()?;
            response.write_all(html.as_bytes())?;
            Ok(())
        },
    )?;

    println!("Server awaiting connection");

    loop {
        let temp = temp_sensor.read_temperature_celsius().unwrap();

        *temp_value.write().unwrap() = temp;
        thread::sleep(Duration::from_secs(1));
    }
}

fn webpage() -> String {
    format!(include_str!("../plot.html"), include_str!("../plot.js"))
}

struct MockSensor {
    value: f32,
}

impl MockSensor {
    fn new() -> Self {
        Self { value: 0.0 }
    }
    fn read_temperature_celsius(&mut self) -> Result<f32, ()> {
        self.value += 1.0;
        Ok(self.value)
    }
}
